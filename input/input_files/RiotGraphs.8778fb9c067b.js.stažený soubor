google.charts.load('current', {'packages':['bar', 'corechart', 'line', 'annotationchart']});

class RiotGraph {

	/*
	Initialize the graph elements
	*/
	constructor(div, title, metric_data, chart_type) {
		
		this.div = document.getElementById(div)
		this.title = title
		this.metric_data = metric_data
		this.colors = ['#DC291E', '#B9949A', '#E0807B', '#950000', '#5E110D', '#000000', '#A2A2A2', '#666564']
		this.data = ""
		this.options = ""
		this.chart = ""
		this.bar_chart_form = "horizontal"
		this.pie_hold_diameter = 0.4
		this.chart_size =  {'top': 10, 'left': 0, 'width': '100%', 'height': '90%'}
		this.chart_type = chart_type
		this.width = ""
		this.height = 300
	}

	/*
	Draw a Google Graph
	*/
	draw() {
		if (this.chart_type == "bar")
			return this.renderBarGraph()

		if (this.chart_type == "donut")
			return this.renderDonutGraph()

		if (this.chart_type == "line")
			return this.renderLineGraph()
	}

	/*
	Calculate how tall the graph should be
	*/
	setGraphHeight() {
		var height = 100 + ((this.metric_data.length - 1) * 30);
		if (height < 300 && this.chart_type != "bar")
			height = 300

		this.height = height
		this.div.style.height = height + "px";
	}

	/*
	Calculate how tall the line graph should be
	*/
	setLineGraphHeight() {
		this.height = 300
		this.div.style.height = "300px";
	}

	/*
	Redraw the graph with updated data.
	*/
	update(metric_data, chart_type) {
		this.metric_data = metric_data
		this.chart_type = chart_type

		if (this.chart_type == "bar") {
			return this.renderBarGraph()
		}	
			
		if (this.chart_type == "donut") {
			return this.renderDonutGraph()
		}

		if (this.chart_type == "line") {
			return this.renderLineGraph()
		}
	}

	/*
	Render a Google BAR Graph
	*/
	renderBarGraph() {
		this.setGraphHeight()
		this.data = google.visualization.arrayToDataTable(this.metric_data);
	    this.options = {
	      bars: this.bar_chart_form,
	      hAxis: {title: '# of Requests'},
	      colors: this.colors,
	      height: this.height
	    };
	    this.chart = new google.charts.Bar(this.div);
		this.chart.draw(this.data, google.charts.Bar.convertOptions(this.options));

	}

	/*
	Render a Google DONUT Graph
	*/
	renderDonutGraph() {
		this.setGraphHeight()
		this.data = google.visualization.arrayToDataTable(this.metric_data);
		this.options = {
	      colors: this.colors,
	      is3D: true,
	      chartArea: this.chart_size,
	      height: this.height,
	    };
		this.chart = new google.visualization.PieChart(this.div);
    	this.chart.draw(this.data, this.options);
	}

	/*
	Render a Google LINE Graph
	*/
	renderLineGraph() {
		this.setLineGraphHeight()
		this.data = new google.visualization.DataTable();
		this.data.addColumn('date', 'Date');
		this.data.addColumn('number', '# Of Requests');

		for (var j = 0; j < this.metric_data.length; j++) {
			if(!(this.metric_data[j][0] instanceof Date)) {
				var date = this.metric_data[j][0].substring(0, this.metric_data[j][0].length-3);
				var new_date = new Date(date * 1000)
				this.metric_data[j][0] = new_date
			}
		}
		
		var start_index = 1;

		if (this.metric_data.length > 2)
			start_index = 2

		for (var i=start_index; i<this.metric_data.length; i++) {
			this.data.addRows([this.metric_data[i]]);
		}

  		this.chart = new google.visualization.AnnotationChart(this.div);

        this.options = {
          displayAnnotations: true,
          colors: this.colors,
          chartArea: this.chart_size,
          displayZoomButtons: false,
        };
      	this.chart.draw(this.data, this.options);

	}

}
